Reading Assignment 4 
==================================================================================

1
===========================================================
They are the first four bytes of e_ident array in elf file, which are '\177', 'E', 'L', 'F'.

2
===========================================================
UIO_USERISPACE is a flag that represents that user data is transferred between kernel and user. UIO_USERSPACE, a signal, roughly has the same meaning. 
UIO_SYSSPACE means the data travels within the kernel and no users.

3
===========================================================
Since there is no corelation between the location(heap) memory read goes to and the location of uio(stack).

4
===========================================================
This could lead to memory leak.

5
===========================================================
enter_new_process(). It is machine dependent.

6
===========================================================
copyin and copyout are defined in kern/vm/copyinout.c. 
memmove is located in common/libc/string/memmove.c.
copyin/out transfers data between kernel and user which has to ensure there is no overlap between both spaces.

7
===========================================================
It is a one-byte user-supplied pointer used in user_space.

8
===========================================================
Numerical value of the exception code for a MIPS system call: 8

9
===========================================================
4 bytes(32 bits). To advance syscall instructions.

10
===========================================================
We do not want the kernel go to panic when encountering a user-level failure. Function kill_curthread() does not have this feature and needs improvement.

11
===========================================================
Additional arguments could be placed on user-stack and the kernel can fetch them starting position sp+16, which jumps over the registerized values.

12
===========================================================
Assembly code for each syscall will be generated by macro and put in a register that kernel is able to find, then proceed to running syscall function.

13
===========================================================
line 85 of syscalls-mips.S: beq a3, $0, 1f

14
===========================================================
File handle(arg0) is in a0. Offset arg should be in a2 or a3. Return value is in v0/v1.

15
===========================================================
vfs_open() to open the file
vop_read() to read the file
vop_write() to write the file
vnode to represent the open file

16
===========================================================
To increase or decrease open file reference counter 


